#                                                         -*- Python -*-
#    parser driver for biab-generated parsers
#    Copyright (C) 2001  Eric S. Tiedemann <est@hyperreal.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

import sys as _sys
from . import token as _token
from . import ast as _ast

class Parser:
    YYEOF = _token.token('$')
    
    def D(self, s):
        if self.yydebug:
            _sys.stderr.write(s)

    def __init__(self, file='<unknown>'):
        self.yydebug = 0
        self.yyfile = file
        self.yystates = []
        # dummy value for start state to keep stacks even
        self.yyvals = [None]
        self.yyinput = []
        self.yystate = 0
        self.yyline = 0
        self.yyn = 0
        # lookahead token as an internal (translated) token number
        self.yychar1 = 0  
        self.yychar = []  # Cause a token to be read.
        self.yyneed_tokenp = 0
        self.yy_at_eof = 0 
        self.yyerrorp = 0
       
        # generate lexeme to token number map
        self.yylexeme = {}
        for i in range(len(self.yytname)):
            self.yylexeme[self.yytname[i]] = i

        # the initial parse routine to execute
        self.yycont = self.yynewstate

    def yyerror(self, msg, line, tok=None):
        e = self.yyexpecting()
        if tok:
            _sys.stderr.write("\"%s\", line %d: %s at or before `%s'%s\n"
                             % (self.yyfile, self.yyline, msg, tok, e))
        else:
            _sys.stderr.write("\"%s\", line %d: %s%s\n"
                             % (self.yyfile, self.yyline, msg, e)) 
        _sys.stderr.flush()
        
    def yyparse(self):
        while self.yycont and not self.yyneed_tokenp:
            self.yycont = self.yycont()

    def yyexpecting(self, limit=5):
      yyn = self.yypact[self.yystate]

      if yyn > self.YYFLAG and yyn < self.YYLAST:
	  count = 0
          # Start X at -yyn if nec to avoid negative indexes in yycheck.
          r = list(range((yyn < 0 and -yyn or 0), self.YYNTOKENS - self.YYNNTS))
          for x in r:
              if self.yycheck[x + yyn] == x:
                  count += 1
          if count < 5:
              msg = ';'
              count = 0
              for x in r:
                  if self.yycheck[x + yyn] == x:
                      msg += " %s `%s'" \
                             % (((count == 0) and "expecting" or "or"),
                                self.yytname[x])
                      count += 1
              return msg
          else:
              return ''
          
    def yynewstate(self):
        # Push a new state, which is found in  yystate.
        # In all cases, when you get here, the value stack
        # has just been pushed. so pushing a state here evens the stacks.
        
        self.yystates.append(self.yystate)

#ifdef DEBUG
        self.D("Entering state %d\n" % (self.yystate,))
        self.D("state stack now: %s\n" % (self.yystates))
#endif
        return self.yybackup

    def yybackup(self):
        # Do appropriate processing given the current state.
        # Read a lookahead token if we need one and don't already have one.

        # First try to decide what to do without reference to lookahead token.
        self.yyn = self.yypact[self.yystate]
        if self.yyn == self.YYFLAG:
#ifdef DEBUG
            self.D("yybackup going to yydefault in state %d\n" % (self.yystate,))
#endif
            return self.yydefault

        # Not known => get a lookahead token if don't already have one.

        # yychar is either empty or YYEOF or a valid token in external form. 

        if self.yychar == [] and not self.yy_at_eof:
#ifdef DEBUG
            self.D("Needing a token.\n")
#endif
            self.yyneed_tokenp = 1

        return self.yybackup1
      
    def yybackup1(self):
        # self.yychar guaranteed to be non-empty unless at EOF
        if self.yy_at_eof:
            t = self.YYEOF
        else:
            t = self.yychar[0]
        self.yychar1 = self.yylexeme[t.type] 
        # note if the shifted token is eof
        if t == self.YYEOF:
            self.yy_at_eof = 1
        else:
            self.yyline = t.line

#ifdef DEBUG
        self.D("yybackup1: lookahead is %s(%d)\n" % (t, self.yychar1))
#endif

        self.yyn += self.yychar1;

        if self.yyn < 0 \
           or self.yyn > self.YYLAST \
           or self.yycheck[self.yyn] != self.yychar1:
            return self.yydefault

        self.yyn = self.yytable[self.yyn]

        # yyn is what to do for this token type in this state.
        #   Negative => reduce, -yyn is rule number.
        #   Positive => shift, yyn is new state.
        #    New state is final state => don't bother to shift,
        #    just return success.
        #   0, or most negative number => error.

        if self.yyn < 0:
            if self.yyn == self.YYFLAG: 
                self.yyerrorp = 1
                self.yyerror("syntax error", t)
                # turn off further processing
                self.yycont = None
                return None
            self.yyn = -self.yyn
            return self.yyreduce
        elif self.yyn == 0:
            self.yyerrorp = 1
            self.yyerror("syntax error", t)
            # turn off further processing
            return None

        if self.yyn == self.YYFINAL:
            # report accept here by..
#ifdef DEBUG
            self.D("accept!\n")
#endif
            return 0

        # Shift the lookahead token.
        if t != self.YYEOF:
            del self.yychar[0]
        self.yychar1 = self.yylexeme[t.type]

#ifdef DEBUG
        self.D("Shifting token %s (%d), " % (t, self.yychar1))
#endif

        self.yyvals.append(t)

        self.yystate = self.yyn;

        return self.yynewstate

    def yydefault(self):
        # Do the default action for the current state.
        self.yyn = self.yydefact[self.yystate];
        if self.yyn == 0:
#ifdef DEBUG
            self.D("parse error!\n")
#endif
            if self.yy_at_eof:
                t = self.YYEOF
            elif self.yychar:
                t = self.yychar[0]
            else:
                t = None
            self.yyerrorp = 1
            self.yyerror("syntax error", self.yyline, t)
            # turn off further processing
            return None
        else:
            return self.yyreduce
    
    def yyreduce(self):
        # Do a reduction.  yyn is the number of a rule to reduce with.

        yylen = self.yyr2[self.yyn];

#ifdef DEBUG
        self.D("Reducing via rule %d (line %d), " % (self.yyn, self.yyrline[self.yyn]))
#endif

#ifdef DEBUG
        # Print the symbols being reduced, and their result.
        i = self.yyprhs[self.yyn]
        while self.yyrhs[i] > 0:
            self.D("%s " % (self.yytname[self.yyrhs[i]],))
            i += 1
        self.D(" -> %s\n" % self.yytname[self.yyr1[self.yyn]])
#endif

        #print 'r%d.0:' % (self.yyn,), self.yyvals
        
        # call semantic action for rule yyn here
        # get returned value in rval
        act = self.yyactions.get(self.yyn)
        if act:
            if yylen > 0:
                rval = act(self.yyvals[-yylen:])
            else:
                rval = act([])
        # otherwise, implement the default action
        # build a simple ast
        else:
            nt = self.yytname[self.yyr1[self.yyn]]
            if yylen == 0:
                kids = []
            else:
                kids = self.yyvals[-yylen:]
            kids = list(filter(lambda k, self=self: \
                          (not hasattr(k, 'type')
                           or k.type not in self.yyelidables),
                          kids))

            if len(kids) == 1 \
               and hasattr(kids[0], 'type') \
               and kids[0].type in self.yyphantoms:
                kids = kids[0].kids
                
            if nt in self.yyflattenables:
                kids1 = []
                for k in kids:
                    if hasattr(k, 'type') and k.type == nt:
                        kids1 += k.kids
                    else:
                        kids1.append(k)
                kids = kids1
                
            if len(kids) == 1 \
               and (nt in self.yyelidables or nt in self.yycollapsables):
                rval = kids[0]
            else:
                rval = _ast.ast(nt, kids)

        if yylen > 0:
            # pop stacks
            self.yystates = self.yystates[:-yylen]
            self.yyvals = self.yyvals[:-yylen]

        #print 'r%d.1:' % (self.yyn,), self.yyvals
        #print self.yychar
        
#ifdef DEBUG
        self.D("state stack now: %s\n" % (self.yystates))
#endif

        self.yyvals.append(rval)

        # Now "shift" the result of the reduction.
        # Determine what state that goes to,
        # based on the state we popped back to
        # and the rule number reduced by.

        self.yyn = self.yyr1[self.yyn]

        self.yystate = \
                     self.yypgoto[self.yyn - self.YYNTBASE] + self.yystates[-1]
    
        if (self.yystate >= 0 \
            and self.yystate <= self.YYLAST \
            and self.yycheck[self.yystate] == self.yystates[-1]):
            self.yystate = self.yytable[self.yystate]
        else:
            self.yystate = self.yydefgoto[self.yyn - self.YYNTBASE];

        return self.yynewstate

    def parse_token(self, t):
        self.yychar.append(t)
#ifdef DEBUG
        self.D("Next token is %s (%d)\n" % (t, self.yylexeme[t.type]))
#endif
        self.yyneed_tokenp = 0
        self.yyparse()
        
    def parse_tokens(self, *ts):
        if ts:
            self.yychar += list(ts)
            self.yyneed_tokenp = 0
            self.yyparse()
        
    def parse_eof(self):
        self.yychar.append(self.YYEOF)
        self.yyneed_tokenp = 0
#ifdef DEBUG
        self.D("Now at end of input.\n")
#endif
        self.yyparse()
        
    def acceptp(self):
        return not self.yycont

    def errorp(self):
        return self.yyerrorp
    
